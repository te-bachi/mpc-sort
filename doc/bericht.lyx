#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language german-ch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subject{Projektarbeit Frühlingssemester 2012}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Sortieren auf Shared Memory Multi-Core
\end_layout

\begin_layout Author
\begin_inset ERT
status open

\begin_layout Plain Layout

Andreas Bachmann
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
small{
\backslash
tt{bachman0@students.zhaw.ch}}
\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Andreas Butti 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
small{
\backslash
tt{buttiand@students.zhaw.ch}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
publishers{
\end_layout

\begin_layout Plain Layout

	
\backslash
vspace{10cm}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{minipage}[t]{6cm}
\end_layout

\begin_layout Plain Layout

		{
\backslash
small Betreuer:}
\backslash

\backslash

\backslash
large Prof.
 Dr.
 Markus Thaler
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		{
\backslash
normalsize School of Engineering
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Technikumstrasse 9
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		8400 Winterthur 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Telefon: 058 934 72 21
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		{
\backslash
tt{markus.thaler@zhaw.ch}}}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{minipage}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Standard
Ordnung in eine unsortierte Liste von Einträgen zu bringen kann ein grundlegende
r Vorteil beim Treffen von Entscheidungen sein.
 Wenn ich den niedrigsten Preis aller eBay-Angebote an Spannungsreglern
 suche, hilft mir die Sortier-Funktion bei der Auswahl.
 Doch je grösser eine Liste ist, desto mehr Vergleiche zwischen den Einträgen
 werden benötigt.
 Durch die Power Wall kann die Leistung pro Recheneinheit nicht mehr erhöht
 werden, was mit umfandreicheren Problemen zu grösseren Laufzeiten führt.
 Als Endanwender ärgert man sich zwar, doch für Wirtschaft und Wissenschaft
 kann Geld verloren gehen oder Simulationen nicht durchgeführt werden.
 Die Hardware-Hersteller umgingen die Leistungsgrenze, indem sie statt die
 Taktfrequenz zu erhöhen einfach mehrere Recheneinhehiten auf einen Chip
 integrierten.
 Sie schoben das eigentliche Problem der Performance auf den Programmierer
 ab.
\end_layout

\begin_layout Standard
Als Studierende des Studiengangs Informatik gefassen wir uns in diesem Fach
 
\begin_inset Quotes eld
\end_inset

Multicore & Parallel Computing
\begin_inset Quotes erd
\end_inset

 mit der Programmierung paralleler Software.
 Ziel unseres Projektes ist ein paralleles Sortier-Verfahren zu implementieren.
 
\end_layout

\begin_layout Section
Vorgehen 
\end_layout

\begin_layout Standard
Die Aufgabenstellung bestand darin für eine Shared Memory Multi-Core Architektur
 ein geeignetes Sortierverfahren zu wählen und zu implementieren.
 Dabei soll ein unsortiertes Array (Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Original-Array"

\end_inset

) in Abschnitte unterteilt und parallel auf konventionelle Methode sortiert
 werden.
 Zum Schluss führt der Algorithmus die sortierten Abschnitte wieder zu einem
 Array zusammen (Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Aufteilen-in-Abschnitte"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement b
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename array_original.eps
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Original Array
\begin_inset CommandInset label
LatexCommand label
name "fig:Original-Array"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\textrm{Abschnitt (Chunk) Länge =}\frac{\textrm{Original Array Länge}}{\textrm{Anzahl Threads}}=\frac{12}{4}=3\label{eq:abschnitt}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement b
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename divide_and_conquer.eps
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Aufteilen in Abschnitte, Sortieren und wieder Zusammenfügen
\begin_inset CommandInset label
LatexCommand label
name "fig:Aufteilen-in-Abschnitte"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
wie
\end_layout

\begin_layout Standard
Vorgehen, Konzept, Rahmenbedingungen, Software-Design 
\end_layout

\begin_layout Section
Resultate
\end_layout

\begin_layout Standard
Der Speedup bei 2 Cores beträgt 177%, was angesichts des Mergen kein Schlechter
 Wert ist.
 Wir erhalten somit eine Effizienz von 88%.
\end_layout

\begin_layout Standard
Bei einem Dualcore mit Hyperthreading mit 4 Threads erreichen wir einen
 Speedup von 268%, und erreichen somit nur noch eine Effizienz von 67%,
 jedoch liegt das auch noch am Hyperthreading.
\end_layout

\begin_layout Section
Reflexion 
\end_layout

\begin_layout Standard
Parallelisierung muss nicht immer kompliziert sein, schon mit einfachen
 Lösungen ist es möglich eine Applikation stark zu beschleunigen.
 Natürlich konnten wir so nicht alles herausholen, um den grösstmöglichen
 Speedup zu erreichen müssten wir neue Algorithmen entwickeln, was natürlich
 nicht so einfach möglichst.
 Trozdem sind wir zufrieden mit dem erreichten Ergebniss...
\end_layout

\end_body
\end_document
